services:
  # Express API Server
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      target: runner
      args:
        NODE_ENV: production
    container_name: turbo-api-prod
    ports:
      - "${API_PORT:-3002}:3002"
    environment:
      - NODE_ENV=production
      - API_PORT=3002
      - SUPABASE_URL=${SUPABASE_URL}
      # New key system (2025+) - Preferred
      - SUPABASE_PUBLISHABLE_KEY=${SUPABASE_PUBLISHABLE_KEY:-}
      - SUPABASE_SECRET_KEY=${SUPABASE_SECRET_KEY:-}
      # Legacy keys - Fallback if new keys not provided
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY:-}
      - SUPABASE_AUTH_JWT_SECRET=${SUPABASE_AUTH_JWT_SECRET}
      - DATABASE_URL=${DATABASE_URL}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nitro Server
  nitro:
    build:
      context: .
      dockerfile: apps/nitro/Dockerfile
      target: runner
      args:
        NODE_ENV: production
    container_name: turbo-nitro-prod
    ports:
      - "${NITRO_PORT:-3004}:3004"
    environment:
      - NODE_ENV=production
      - PORT=3004
      - SUPABASE_URL=${SUPABASE_URL}
      # New key system (2025+) - Preferred
      - SUPABASE_PUBLISHABLE_KEY=${SUPABASE_PUBLISHABLE_KEY:-}
      - SUPABASE_SECRET_KEY=${SUPABASE_SECRET_KEY:-}
      # Legacy keys - Fallback if new keys not provided
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY:-}
      - SUPABASE_AUTH_JWT_SECRET=${SUPABASE_AUTH_JWT_SECRET}
      - DATABASE_URL=${DATABASE_URL}
      - CORS_ORIGIN=${CORS_ORIGIN}
      - LOG_LEVEL=${LOG_LEVEL:-info}
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nuxt Frontend
  nuxt:
    build:
      context: .
      dockerfile: apps/nuxt/Dockerfile
      target: runner
      args:
        NODE_ENV: production
    container_name: turbo-nuxt-prod
    ports:
      - "${NUXT_PORT:-3001}:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - NUXT_PUBLIC_API_BASE=${NUXT_PUBLIC_API_BASE:-http://localhost:3002}
    restart: unless-stopped
    networks:
      - app-network
    depends_on:
      - api

  # Vite App
  vite:
    build:
      context: .
      dockerfile: apps/vite/Dockerfile
      target: runner
    container_name: turbo-vite-prod
    ports:
      - "${VITE_PORT:-3000}:80"
    restart: unless-stopped
    networks:
      - app-network

  # Docus Documentation
  docus:
    build:
      context: .
      dockerfile: apps/docus/Dockerfile
      target: runner
    container_name: turbo-docus-prod
    ports:
      - "${DOCS_PORT:-3003}:80"
    restart: unless-stopped
    networks:
      - app-network

  # Storybook
  storybook:
    build:
      context: .
      dockerfile: apps/storybook/Dockerfile
      target: runner
    container_name: turbo-storybook-prod
    ports:
      - "${STORYBOOK_PORT:-6006}:80"
    restart: unless-stopped
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
